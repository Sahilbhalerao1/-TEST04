Assignment4

1]
=>def find_common_elements(arr1, arr2, arr3):
    result = []
    i, j, k = 0, 0, 0

    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        if arr1[i] == arr2[j] == arr3[k]:
            result.append(arr1[i])
            i += 1
            j += 1
            k += 1
        elif arr1[i] < arr2[j]:
            i += 1
        elif arr2[j] < arr3[k]:
            j += 1
        else:
            k += 1

    return result

# Test Example 1
arr1 = [1, 2, 3, 4, 5]
arr2 = [1, 2, 5, 7, 9]
arr3 = [1, 3, 4, 5, 8]

output = find_common_elements(arr1, arr2, arr3)
print(output)  # Output: [1, 5]

2]
=>def find_missing_integers(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)

    distinct_in_nums1 = list(set1 - set2)
    distinct_in_nums2 = list(set2 - set1)

    return [distinct_in_nums1, distinct_in_nums2]

# Test Example 1
nums1 = [1, 2, 3]
nums2 = [2, 4, 6]

output = find_missing_integers(nums1, nums2)
print(output)  # Output: [[1, 3], [4, 6]]

3]
=>def transpose_matrix(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    # Create a new matrix with flipped dimensions (rows become columns and vice versa)
    transposed_matrix = [[0 for _ in range(rows)] for _ in range(cols)]

    for i in range(rows):
        for j in range(cols):
            transposed_matrix[j][i] = matrix[i][j]

    return transposed_matrix

# Test Example 1
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

output = transpose_matrix(matrix)
print(output)  # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

4]
=>def array_pair_sum(nums):
    nums.sort()  # Sort the array in ascending order
    max_sum = 0

    for i in range(0, len(nums), 2):
        max_sum += nums[i]

    return max_sum

# Test Example 1
nums = [1, 4, 3, 2]
output = array_pair_sum(nums)
print(output)  # Output: 4

5]
=>def complete_staircase_rows(n):
    rows = 0
    coins_needed = 1

    while n >= coins_needed:
        n -= coins_needed
        coins_needed += 1
        rows += 1

    return rows

# Test Example 1
n = 5
output = complete_staircase_rows(n)
print(output)  # Output: 2

6]
=>def sorted_squares(nums):
    squared_nums = [num**2 for num in nums]
    sorted_squared_nums = sorted(squared_nums)
    return sorted_squared_nums

# Test Example 1
nums = [-4, -1, 0, 3, 10]
output = sorted_squares(nums)
print(output)  # Output: [0, 1, 9, 16, 100]

8]
=>def rearrange_array(nums, n):
    rearranged = []
    for i in range(n):
        rearranged.append(nums[i])  # Add xi
        rearranged.append(nums[i + n])  # Add yi
    return rearranged

# Test Example 1
nums = [2, 5, 1, 3, 4, 7]
n = 3
output = rearrange_array(nums, n)
print(output)  # Output: [2, 3, 5, 4, 1, 7]
